name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.4)'
        required: true
        type: string

jobs:
  pre-release-checks:
    name: Pre-Release Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: poetry install --with dev

    - name: Run all tests
      run: poetry run pytest tests/ -v

    - name: MANDATORY - Verify 100% web interface coverage
      run: |
        echo "üîç Verifying 100% web interface test coverage (MANDATORY FOR RELEASE)..."
        poetry run pytest tests/test_web.py tests/test_web_e2e.py tests/test_web_coverage.py \
          --cov=vpc_flow_investigator.web \
          --cov-fail-under=100 \
          --cov-report=term-missing
        echo "‚úÖ Web interface has 100% test coverage - RELEASE APPROVED"

    - name: Run linting
      run: |
        poetry run black --check src/ tests/
        poetry run isort --check-only src/ tests/
        poetry run flake8 src/ tests/
        poetry run mypy src/

    - name: Run security checks
      run: |
        poetry run bandit -r src/ -f json -o bandit-report.json || true
        poetry run safety check || true

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: pre-release-checks
    if: success()
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest

    - name: Build package
      run: poetry build

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name || github.event.inputs.version }}
        release_name: Release ${{ github.ref_name || github.event.inputs.version }}
        body: |
          ## üöÄ Release ${{ github.ref_name || github.event.inputs.version }}
          
          ### ‚úÖ Quality Assurance
          - All tests passing
          - **100% web interface test coverage verified**
          - Code quality checks passed
          - Security scans completed
          
          ### üì¶ Installation
          ```bash
          pip install vpc-flow-investigator==${{ github.ref_name || github.event.inputs.version }}
          ```
          
          ### üîß Usage
          ```bash
          # Web interface
          vpc-flow-web
          
          # CLI
          vpc-flow-investigator --help
          ```
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/
        asset_name: release-artifacts
        asset_content_type: application/zip