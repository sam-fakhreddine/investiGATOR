name: Web Interface Tests

on:
  push:
    branches: [main, develop]
    paths:
      - 'src/vpc_flow_investigator/web.py'
      - 'src/vpc_flow_investigator/templates/**'
      - 'src/vpc_flow_investigator/static/**'
      - 'tests/test_web.py'
      - '.github/workflows/web-tests.yml'
  pull_request:
    branches: [main, develop]
    paths:
      - 'src/vpc_flow_investigator/web.py'
      - 'src/vpc_flow_investigator/templates/**'
      - 'src/vpc_flow_investigator/static/**'
      - 'tests/test_web.py'
      - '.github/workflows/web-tests.yml'

jobs:
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-web-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}

    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: |
        poetry install --with dev
        poetry add --group dev httpx pytest-asyncio pytest-cov

    - name: Run web API tests with 100% coverage requirement
      run: |
        poetry run pytest tests/test_web.py tests/test_web_e2e.py tests/test_web_coverage.py -v --tb=short \
          --cov=vpc_flow_investigator.web \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=100

    - name: Upload API test coverage
      uses: codecov/codecov-action@v4
      if: matrix.python-version == '3.12'
      with:
        file: ./coverage.xml
        flags: web-api
        name: web-api-coverage

  integration-tests:
    name: Web Integration Tests
    runs-on: ubuntu-latest
    needs: api-tests

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        poetry install --with dev
        poetry add --group dev httpx pytest-asyncio

    - name: Start web server and run integration tests
      run: |
        set -euo pipefail
        
        # Shared test functions
        test_api_endpoint() {
          curl -f http://127.0.0.1:8000/api/test > /dev/null
          echo "✓ API test endpoint working"
        }
        
        test_profiles_endpoint() {
          local response=$(curl -f http://127.0.0.1:8000/api/profiles)
          if echo "$response" | grep -q '"profiles"'; then
            echo "✓ Profiles endpoint working"
          else
            echo "✗ Profiles endpoint failed: $response"
            return 1
          fi
        }
        
        test_home_page() {
          curl -f http://127.0.0.1:8000/ > /dev/null
          echo "✓ Home page accessible"
        }
        
        cleanup_server() {
          if [ -n "${SERVER_PID:-}" ] && kill -0 "$SERVER_PID" 2>/dev/null; then
            echo "Stopping server (PID: $SERVER_PID)"
            kill "$SERVER_PID" 2>/dev/null || true
            wait "$SERVER_PID" 2>/dev/null || true
          fi
        }
        
        # Ensure cleanup on exit
        trap cleanup_server EXIT
        
        # Start server in background
        poetry run uvicorn vpc_flow_investigator.web:app --host 127.0.0.1 --port 8000 --log-level error &
        SERVER_PID=$!
        echo "Started server with PID: $SERVER_PID"
        
        # Wait for server to be ready
        echo "Waiting for server to start..."
        for i in $(seq 1 30); do
          if curl -s -f http://127.0.0.1:8000/api/test > /dev/null 2>&1; then
            echo "✅ Server is ready after ${i} seconds"
            break
          fi
          echo "Attempt $i: Server not ready yet..."
          sleep 1
        done
        
        # Run all tests
        test_api_endpoint
        test_profiles_endpoint
        test_home_page
        
        echo "All integration tests passed!"

  security-tests:
    name: Web Security Tests
    runs-on: ubuntu-latest
    needs: api-tests

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        poetry install --with dev
        poetry add --group dev httpx pytest-asyncio bandit safety

    - name: Run security tests
      run: |
        set -euo pipefail
        
        # Security scan
        poetry run bandit -r src/vpc_flow_investigator/web.py -f json -o bandit-report.json || true
        
        # Vulnerability check
        poetry run safety check --output json > safety-report.json || true
        
        # Web vulnerability tests
        poetry run python -c "
        from fastapi.testclient import TestClient
        from vpc_flow_investigator.web import WebApplicationFactory
        
        app = WebApplicationFactory.create_app()
        client = TestClient(app)
        
        # Test basic endpoint security
        response = client.get('/api/test')
        assert response.status_code == 200
        print('✓ API endpoints secure')
        
        # Test form handling (should not crash on malformed input)
        try:
            response = client.post('/api/analyze', data={
                'profile': 'test-profile',
                'instance_id': 'invalid-id',
                'analysis': 'all'
            })
            # Should handle gracefully (may return 400 or 500, but not crash)
            print('✓ Form input handling secure')
        except Exception:
            print('✓ Form input handling secure (graceful error)')
        
        print('Security tests completed!')
        "

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  performance-tests:
    name: Web Performance Tests
    runs-on: ubuntu-latest
    needs: api-tests

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: latest
        virtualenvs-create: true
        virtualenvs-in-project: true

    - name: Install dependencies
      run: |
        poetry install --with dev
        poetry add --group dev httpx pytest-asyncio pytest-benchmark

    - name: Run performance tests
      run: |
        set -euo pipefail
        
        poetry run python -c "
        import time
        import concurrent.futures
        from fastapi.testclient import TestClient
        from vpc_flow_investigator.web import WebApplicationFactory
        
        app = WebApplicationFactory.create_app()
        client = TestClient(app)
        
        def test_endpoint():
            response = client.get('/api/test')
            return response.status_code == 200
        
        # Test concurrent requests
        start_time = time.time()
        with concurrent.futures.ThreadPoolExecutor(max_workers=10) as executor:
            futures = [executor.submit(test_endpoint) for _ in range(50)]
            results = [future.result() for future in concurrent.futures.as_completed(futures)]
        
        end_time = time.time()
        duration = end_time - start_time
        
        assert all(results), 'Some requests failed'
        assert duration < 10, f'Performance test took too long: {duration}s'
        
        print(f'✓ Handled 50 concurrent requests in {duration:.2f}s')
        print('Performance tests passed!')
        "