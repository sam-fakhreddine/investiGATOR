[tool.poetry]
name = "vpc-flow-investigator"
version = "1.0.3"
description = "AWS VPC Flow Log analysis and investigation tool"
authors = ["VPC Flow Log Investigator Team"]
readme = "README.md"
packages = [{include = "vpc_flow_investigator", from = "src"}]

[tool.poetry.dependencies]
python = "^3.12"
boto3 = "^1.35.0"
botocore = "^1.35.0"
fastapi = "^0.115.0"
uvicorn = "^0.34.0"
jinja2 = "^3.1.0"
python-multipart = "^0.0.20"

[tool.poetry.group.dev.dependencies]
pytest = "^8.3.0"
black = "^25"
isort = "^6"
mypy = "^1.13.0"
flake8 = "^7.1.0"
python-semantic-release = "^10.1.0"
pre-commit = "^4.0.0"
commitizen = "^4.0.0"
httpx = "^0.27.0"
pytest-asyncio = "^0.26.0"
pytest-cov = "^6.0.0"
pytest-benchmark = "^4.0.0"
bandit = "^1.7.0"
safety = "^3.0.0"

[tool.poetry.scripts]
vpc-flow-investigator = "vpc_flow_investigator.cli:main"
vpc-flow-web = "vpc_flow_investigator.web:run_server"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 88
target-version = ['py312']
extend-exclude = '''
/(
    \.git
  | \.mypy_cache
  | \.pytest_cache
  | \.venv
  | venv
  | build
  | dist
  | __pycache__
)/
'''

[tool.isort]
profile = "black"
line_length = 88
skip_glob = [
    ".venv/*",
    "venv/*",
    "build/*",
    "dist/*",
    "__pycache__/*",
    ".pytest_cache/*",
    ".mypy_cache/*"
]

[tool.mypy]
python_version = "3.12"
warn_return_any = false
warn_unused_configs = true
disallow_untyped_defs = false
no_implicit_optional = true
check_untyped_defs = false
mypy_path = "src"
namespace_packages = true
explicit_package_bases = true
exclude = [
    "build/",
    "dist/",
    ".venv/",
    "venv/",
    "__pycache__/",
    ".pytest_cache/",
    ".mypy_cache/",
    "node_modules/"
]

[[tool.mypy.overrides]]
module = [
    "boto3",
    "botocore.*",
    "fastapi.*", 
    "uvicorn.*",
    "jinja2.*",
    "pytest.*"
]
ignore_missing_imports = true

[tool.flake8]
max-line-length = 88
exclude = [
    ".venv",
    "venv",
    ".git",
    "__pycache__",
    "build",
    "dist",
    "*.egg-info",
    ".pytest_cache",
    ".mypy_cache",
    "node_modules"
]
extend-ignore = [
    "E203",  # whitespace before ':' (conflicts with black)
    "E501",  # line too long (black handles this)
    "W503",  # line break before binary operator (black prefers this)
    "W504",  # line break after binary operator
    "E129",  # visually indented line with same indent as next logical line
    "E128",  # continuation line under-indented for visual indent
]

[tool.semantic_release]
version_toml = ["pyproject.toml:tool.poetry.version"]
build_command = "echo 'Skipping build in semantic release'"
commit_message = "chore(release): {version}"
tag_format = "v{version}"
changelog_file = "CHANGELOG.md"
upload_to_vcs_release = false

[tool.coverage.run]
source = ["src"]

[tool.coverage.report]
fail_under = 100
include = ["**/web.py"]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]